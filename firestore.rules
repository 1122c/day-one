rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================================================
    // USER PROFILES
    // ============================================================================
    match /users/{userId} {
      // Users can read their own profile
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Users can read public profiles
      allow read: if request.auth != null && 
        resource.data.privacy.profileVisibility == 'public';
      
      // Users can read profiles if they have a connection
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/connections/{connectionId}) &&
        resource.data.privacy.profileVisibility == 'connections';
      
      // Users can create their own profile
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Users can update their own profile
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Users can delete their own profile
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // ============================================================================
    // MATCHES
    // ============================================================================
    match /matches/{matchId} {
      // Users can read matches they're involved in
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.userIds;
      
      // Users can create matches (system or AI-generated)
      allow create: if request.auth != null;
      
      // Users can update matches they're involved in
      allow update: if request.auth != null && 
        request.auth.uid in resource.data.userIds;
      
      // Users can delete matches they're involved in
      allow delete: if request.auth != null && 
        request.auth.uid in resource.data.userIds;
    }
    
    // ============================================================================
    // CONNECTIONS
    // ============================================================================
    match /connections/{connectionId} {
      // Users can read connections they're involved in
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.userIds;
      
      // Users can create connections
      allow create: if request.auth != null;
      
      // Users can update connections they're involved in
      allow update: if request.auth != null && 
        request.auth.uid in resource.data.userIds;
      
      // Users can delete connections they're involved in
      allow delete: if request.auth != null && 
        request.auth.uid in resource.data.userIds;
    }
    
    // ============================================================================
    // NOTIFICATIONS
    // ============================================================================
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Users can create notifications for themselves
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      
      // Users can update their own notifications
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Users can delete their own notifications
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // ============================================================================
    // CONVERSATIONS
    // ============================================================================
    match /conversations/{conversationId} {
      // Users can read conversations they're participants in
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.participantIds;
      
      // Users can create conversations they're participants in
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participantIds;
      
      // Users can update conversations they're participants in
      allow update: if request.auth != null && 
        request.auth.uid in resource.data.participantIds;
      
      // Users can delete conversations they're participants in
      allow delete: if request.auth != null && 
        request.auth.uid in resource.data.participantIds;
    }
    
    // ============================================================================
    // MESSAGES
    // ============================================================================
    match /messages/{messageId} {
      // Users can read messages from conversations they're participants in
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/conversations/{conversationId}) &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/{conversationId}).data.participantIds &&
        resource.data.conversationId == conversationId;
      
      // Users can create messages in conversations they're participants in
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId &&
        exists(/databases/$(database)/documents/conversations/{conversationId}) &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/{conversationId}).data.participantIds &&
        request.resource.data.conversationId == conversationId;
      
      // Users can update their own messages
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.senderId;
      
      // Users can delete their own messages
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.senderId;
    }
    
    // ============================================================================
    // SYSTEM COLLECTIONS (Admin only)
    // ============================================================================
    match /system/{document=**} {
      // Only allow admin access (you can customize this based on your admin system)
      allow read, write: if false;
    }
    
    // ============================================================================
    // ANALYTICS (Read-only for authenticated users)
    // ============================================================================
    match /analytics/{document=**} {
      // Users can read analytics data
      allow read: if request.auth != null;
      
      // Only system can write analytics
      allow write: if false;
    }
    
    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================
    
    // Check if user is admin (customize based on your admin system)
    function isAdmin() {
      return request.auth != null && 
        request.auth.token.admin == true;
    }
    
    // Check if user is verified
    function isVerified() {
      return request.auth != null && 
        request.auth.token.email_verified == true;
    }
    
    // Check if user has premium subscription
    function isPremium() {
      return request.auth != null && 
        request.auth.token.premium == true;
    }
    
    // Validate user profile data
    function isValidProfile(data) {
      return data.keys().hasAll(['email', 'name', 'values', 'privacy']) &&
        data.email is string &&
        data.name is string &&
        data.name.size() > 0 &&
        data.name.size() <= 100 &&
        data.email.matches('^[^@]+@[^@]+\\.[^@]+$');
    }
    
    // Validate message data
    function isValidMessage(data) {
      return data.keys().hasAll(['conversationId', 'senderId', 'content']) &&
        data.content is string &&
        data.content.size() > 0 &&
        data.content.size() <= 1000;
    }
    
    // Validate notification data
    function isValidNotification(data) {
      return data.keys().hasAll(['userId', 'type', 'title', 'message']) &&
        data.title is string &&
        data.message is string &&
        data.title.size() > 0 &&
        data.title.size() <= 200 &&
        data.message.size() > 0 &&
        data.message.size() <= 1000;
    }
  }
}
